# Code generated by font_to_py.py.
# Font: HarmonyOS_Sans_Bold.ttf Char set: /0123456789:
# Cmd: H:\pgs\mpython\g\font\ptm字体文件\font_to_py.py -x -c 1234567890/: HarmonyOS_Sans_Bold.ttf 20 HarmonyOS_Sans_Bold.py
version = '0.33'
def height():
    return 19

def baseline():
    return 19

def max_width():
    return 15

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 47

def max_ch():
    return 63

_font =\
b'\x0d\x00\x0f\x80\x3f\xe0\x7f\xf0\xf1\xf0\xe0\xf0\x20\xf0\x01\xf0'\
b'\x03\xe0\x07\xc0\x0f\x80\x0f\x00\x0e\x00\x0e\x00\x00\x00\x00\x00'\
b'\x06\x00\x0f\x00\x0f\x00\x06\x00\x0b\x00\x00\x00\x01\xc0\x01\xc0'\
b'\x03\xc0\x03\x80\x07\x80\x07\x00\x07\x00\x0f\x00\x0e\x00\x1e\x00'\
b'\x1c\x00\x1c\x00\x3c\x00\x38\x00\x38\x00\x78\x00\x70\x00\xf0\x00'\
b'\x0f\x00\x00\x00\x07\xc0\x1f\xf0\x1f\xf0\x3c\x78\x3c\x78\x78\x3c'\
b'\x78\x3c\x78\x3c\x78\x3c\x78\x3c\x78\x3c\x78\x3c\x78\x3c\x3c\x78'\
b'\x3c\x78\x1f\xf0\x1f\xf0\x07\xc0\x0f\x00\x00\x00\x01\xe0\x07\xe0'\
b'\x0f\xe0\x3f\xe0\x3d\xe0\x31\xe0\x21\xe0\x01\xe0\x01\xe0\x01\xe0'\
b'\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0'\
b'\x0f\x00\x00\x00\x0f\xc0\x1f\xe0\x3f\xf0\x78\xf8\x70\x78\x10\x78'\
b'\x00\x78\x00\xf8\x01\xf0\x01\xe0\x03\xc0\x07\xc0\x0f\x80\x1f\x00'\
b'\x3e\x00\x7f\xfc\x7f\xfc\x7f\xfc\x0f\x00\x00\x00\x0f\xc0\x3f\xf0'\
b'\x3f\xf0\x78\xf8\x30\x78\x00\x78\x00\xf8\x07\xf0\x07\xe0\x07\xf8'\
b'\x00\x78\x00\x3c\x10\x3c\x70\x3c\x78\x7c\x7f\xf8\x3f\xf0\x0f\xc0'\
b'\x0f\x00\x00\x00\x01\xe0\x01\xe0\x03\xc0\x07\xc0\x07\x80\x0f\x00'\
b'\x0f\x00\x1e\x78\x1e\x78\x3c\x78\x38\x78\x7f\xfe\x7f\xfe\x7f\xfe'\
b'\x00\x78\x00\x78\x00\x78\x00\x78\x0f\x00\x00\x00\x1f\xf8\x1f\xf8'\
b'\x1f\xf8\x1c\x00\x1c\x00\x1c\x00\x3f\xe0\x3f\xf0\x3f\xf8\x3c\x7c'\
b'\x08\x3c\x00\x3c\x00\x3c\x18\x3c\x3c\x78\x3f\xf8\x1f\xf0\x07\xc0'\
b'\x0f\x00\x00\x00\x01\xe0\x03\xc0\x03\xc0\x07\x80\x0f\x00\x0e\x00'\
b'\x1f\xe0\x3f\xf0\x3f\xf8\x7c\x7c\x78\x3c\x78\x3c\x78\x3c\x78\x3c'\
b'\x3c\x78\x3f\xf8\x1f\xf0\x07\xc0\x0f\x00\x00\x00\x7f\xf8\x7f\xf8'\
b'\x7f\xf8\x00\x70\x00\xf0\x00\xf0\x00\xe0\x01\xe0\x01\xe0\x03\xc0'\
b'\x03\xc0\x03\x80\x07\x80\x07\x80\x0f\x00\x0f\x00\x0e\x00\x1e\x00'\
b'\x0f\x00\x00\x00\x0f\xc0\x3f\xf0\x3f\xf0\x7c\xf8\x78\x78\x78\x78'\
b'\x7c\xf8\x3f\xf0\x0f\xe0\x3f\xf8\x3c\x78\x78\x3c\x78\x3c\x78\x3c'\
b'\x7c\x7c\x3f\xf8\x1f\xf0\x0f\xc0\x0f\x00\x00\x00\x07\xc0\x1f\xf0'\
b'\x3f\xf8\x7c\x78\x78\x3c\x78\x3c\x78\x3c\x7c\x7c\x3f\xfc\x1f\xf8'\
b'\x0f\xf8\x00\xf0\x01\xe0\x03\xe0\x03\xc0\x07\x80\x07\x80\x0f\x00'\
b'\x06\x00\x00\x00\x00\x00\x00\x00\x30\x78\x78\x30\x00\x00\x00\x00'\
b'\x00\x30\x78\x78\x30'

_index =\
b'\x00\x00\x28\x00\x50\x00\x78\x00\xa0\x00\xc8\x00\xf0\x00\x18\x01'\
b'\x40\x01\x68\x01\x90\x01\xb8\x01\xe0\x01\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\xf5\x01'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)
def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 47 + 1) if oc >= 47 and oc <= 63 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 19
    return _mvfont[doff + 2:next_offs], 19, width
 
